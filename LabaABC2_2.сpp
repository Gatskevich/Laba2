
#include <iostream>
#include <thread>
#include <atomic>
#include <mutex>
#include <vector>
#include <queue>

std::condition_variable con_var;

std::mutex mutex_thread;
std::atomic<int> count_atomic{ 0 };
std::atomic<int> count{ 0 };
std::atomic<int> count_queueSize{ 0 };
const int  queueSize = 4, thread = 2;
std::vector<std::thread> producer;
std::vector<std::thread> consumer;
int prodcount = 0;
int summ = 0;
int TaskNum = 4*1024*1024;
int temp_const = 0;

class Queue {
	std::queue<uint8_t> que;
public:
	void push(uint8_t val) {
		std::lock_guard<std::mutex> locker(mutex_thread);
		que.push(val);
	}
	bool pop(uint8_t& val) {
		if (que.size() == 0)
		{
			std::this_thread::sleep_for(std::chrono::milliseconds(1));
		}
		std::unique_lock<std::mutex> q(mutex_thread);
		if (que.size() != 0) {
			val = que.front();
			que.pop();
			return true;
		}
		return false;
	}
	
};
class Queue_const {
	std::queue<uint8_t> que_const;
public:
	void push(uint8_t val)
	{
		std::unique_lock<std::mutex> locker(mutex_thread);
		if (que_const.size() == queueSize) {
			con_var.wait(locker);
		}
		que_const.push(val);
		
	}
	bool pop(uint8_t& val)
	{

		if (que_const.size() == 0)
		{
			std::this_thread::sleep_for(std::chrono::milliseconds(1));
		}
		std::unique_lock<std::mutex> q(mutex_thread);
		if (que_const.size() != 0) {
			val = que_const.front();
			que_const.pop();
			con_var.notify_one();
			return true;
		}
		return false;
	}
};
Queue q;
Queue_const q_const;
void Producer()
{
	int prodcount = 0;
	while (prodcount < TaskNum)
	{
		if (temp_const)
			q.push(1);
		else
			q_const.push(1);
		prodcount++;
		count_atomic.fetch_add(1);	
	}
}
void Consumer()
{
	bool a = true;
	while (a)
	{
		uint8_t val;
		bool temp; 
		if (temp_const)
			temp = q.pop(val);
		else
			temp = q_const.pop(val);
		if (!temp && (count_atomic == TaskNum * thread)) {
			std::cout << "Empty";
			a = false;
		}
		else
			count.fetch_add(val);
	}
}

void main() {
	clock_t start = clock();
	for (int i = 0; i < thread; i++) {
		producer.push_back(std::thread(Producer));
		consumer.push_back(std::thread(Consumer));
	}
	for (int i = 0; i < thread; i++) {
		producer[i].join();
		consumer[i].join();
	}
	clock_t end = clock();
	double seconds = (double)(end - start) / CLK_TCK;
	std::cout << "Time: " << seconds << std::endl << std::endl;
	std::cout << std::endl << "Sum:" << count;
}

